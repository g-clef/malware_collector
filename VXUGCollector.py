import os
import requests
import tempfile
import zipfile
import py7zr

from bs4 import BeautifulSoup

from malware_collector import MalwareCollector


class VXUGCollector(MalwareCollector):
    # collect malware from https://vxug.fakedoma.in/samples/

    base_url = "https://vxug.fakedoma.in"
    list_url = base_url + "/samples.html"

    def __init__(self):
        super().__init__()
        self.path = os.environ.get("VXUG_PATH", "/RAID/vxug")
        self.archive_path = os.environ.get("VXUG_ARCHIVE_PATH", "/RAID/vxug")
        token = os.environ.get("VXUG_TOKEN", None)
        if token is not None:
            self.archive_token = token

    def download_file(self, href, name):
        download_url = self.base_url + href
        print(f"getting {name} from {download_url}")
        target_dir = os.path.join(self.path, name)
        if not os.path.exists(target_dir):
            os.mkdir(target_dir)
        full_saved_path = os.path.join(target_dir, name + ".7z")
        if not os.path.exists(full_saved_path):
            response = requests.get(download_url, stream=True)
            with open(full_saved_path, "wb") as fileHandle:
                for chunk in response.iter_content(chunk_size=8192):
                    fileHandle.write(chunk)
        return full_saved_path

    @staticmethod
    def make_zip(file_path, name):
        # extract the contents of the 7z file to a tempdir, then move all of them into the newly
        # created zip file in the same path.
        with tempfile.TemporaryDirectory() as tempdir:
            archive = py7zr.SevenZipFile(file_path, mode="r")
            archive.extractall(tempdir)
            archive.close()
            seven_zip_path = file_path.split(os.path.sep)[:-1]
            zip_path = os.path.join(seven_zip_path, name + ".zip")
            zip_archive = zipfile.ZipFile(zip_path, "a")
            for filename in os.listdir(tempdir):
                zip_archive.write(os.path.join(tempdir, filename), arcname=filename)
        return zip_path

    @staticmethod
    def should_download_link(a, href, name):
        if "href" not in a.attrs:
            return False
        if not href.startswith("/samples"):
            return False
        if not href.endswith(".7z"):
            return False
        if name.endswith(".txt"):
            return False
        return True

    def get(self):
        base_list = requests.get(self.list_url)
        soup = BeautifulSoup(base_list.content, features='html.parser')
        links = soup.find_all("a")
        for a in links:
            href = a.attrs['href']
            name = a.text
            if self.should_download_link(a, href, name):
                saved_7z_file = self.download_file(href, name)
                zip_path = self.make_zip(saved_7z_file, name)
                self.submit_file(zip_path)

    def cleanup(self):
        for entry in os.listdir(self.path):
            if os.path.isdir(entry):
                sub_dir = os.path.join(self.path, entry)
                for filename in os.listdir(sub_dir):
                    if filename.endswith(".zip"):
                        full_zip_path = os.path.join(sub_dir, filename)
                        self.submit_file(full_zip_path)


if __name__ == "__main__":
    vx = VXUGCollector()
    vx.run()
