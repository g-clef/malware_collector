import datetime
import os

from typing import List

import requests

from bs4 import BeautifulSoup
from malwaretl_stoq_transformer import transformer

from malware_collector import MalwareCollector


class VXUGCollector(MalwareCollector):
    # collect malware from https://samples.vx-underground.org/samples/Blocks/

    base_url = "https://samples.vx-underground.org/samples/Blocks/"
    sub_urls = ["APT Collection/",
                "Argus Collection/",
                "Bazaar Collection/",
                "Virusshare Collection/"
    ]

    def __init__(self):
        super().__init__()
        self.path = os.environ.get("VXUG_PATH", "/RAID")

    def download_file(self, href, name, subdir) -> str:
        download_url = self.base_url + href
        target_dir = os.path.join(self.path, subdir)
        if not os.path.exists(target_dir):
            os.mkdir(target_dir)
        full_saved_path = os.path.join(target_dir, name + ".7z")
        if not os.path.exists(full_saved_path):
            print(f"downloading {name}")
            response = requests.get(download_url, stream=True, timeout=60)
            with open(full_saved_path, "wb") as fileHandle:
                for chunk in response.iter_content(chunk_size=8192):
                    fileHandle.write(chunk)
        return full_saved_path

    @staticmethod
    def should_download_link(a, href, name) -> bool:
        if "href" not in a.attrs:
            return False
        if not href.endswith(".7z"):
            return False
        if name.endswith(".txt"):
            return False
        return True

    def get(self) -> List[str]:
        downloaded_files = list()
        for sub_dir in self.sub_urls:
            list_url = self.base_url + sub_dir
            base_list = requests.get(list_url, timeout=60)
            soup = BeautifulSoup(base_list.content, features='html.parser')
            links = soup.find_all("a")
            for a in links:
                href = a.attrs['href']
                name = a.text
                if self.should_download_link(a, href, name):
                    final_path = self.download_file(href, name, sub_dir)
                    downloaded_files.append(final_path)
        return downloaded_files


if __name__ == "__main__":
    print("starting run")
    stoq = transformer.init_vxug(scan_mode=True)
    vx = VXUGCollector()
    downloaded_files = vx.run()
    print(f"finished download, grabbed {len(downloaded_files)} files")
    if downloaded_files:
        stoq, metadata = transformer.init_vxug(scan_mode=True)
        metadata.extra_data['collection_time'] = datetime.datetime.utcnow().isoformat()
        vx.scan_downloaded_files(stoq, metadata, downloaded_files)
    print("done")