import git
import os
import shutil
import tempfile
import zipfile

from malware_collector import MalwareCollector


class ZooCollector(MalwareCollector):
    # plan: git checkout https://github.com/ytisf/theZoo/tree/master/malwares/Binaries
    # to the base paththen walk through each folder and unzip the files that contain
    # the actual malware.

    def __init__(self):
        super(ZooCollector, self).__init__()
        self.base_path = self.configfile.get("theZoo", "git_path")

    def get(self) -> bool:
        # run the git pull to get the most recent data out of the repository
        # note: this assumes that the repo is already set up.
        # returns a boolean of whether anything changed. True = something new is in the repo.
        repo = git.Repo(self.base_path)
        current = repo.head.commit
        repo.remotes.origin.pull()
        return current != repo.head.commit

    @staticmethod
    def _try_password_extract(zip_file, filename, destination, password) -> bool:
        try:
            zip_file.extract(filename, destination, pwd=password)
            return True
        except RuntimeError:
            # could mean this wasn't compressed with a password
            try:
                zip_file.extract(filename, destination)
                return True
            except Exception:
                pass
        return False

    def _handle_zipfile(self, target_zip: zipfile.ZipFile, password: bytes, destination_dir: str):
        contained_files = target_zip.namelist()
        for target in contained_files:
            if target.endswith(".txt"):
                continue
            elif target.startswith("."):
                continue
            elif target.endswith(".zip"):
                # nested zip files, ugh
                with tempfile.TemporaryDirectory() as tempdir:
                    success = self._try_password_extract(target_zip, target, tempdir, password)
                    if not success:
                        continue
                    sub_compressed_file = zipfile.ZipFile(os.path.join(tempdir, target), mode="r")
                    self._handle_zipfile(sub_compressed_file, password, destination_dir)
            else:
                with tempfile.TemporaryDirectory() as tempdir:
                    success = self._try_password_extract(target_zip, target, tempdir, password)
                    if not success:
                        continue
                    for file_name in os.listdir(tempdir):
                        full_path_to_target = os.path.join(tempdir, file_name)
                        try:
                            md5, sha1 = self.make_hashes(os.path.join(tempdir, file_name))
                        except Exception:
                            continue
                        final_name = md5 + "-" + sha1 + "-" + file_name
                        shutil.move(full_path_to_target, os.path.join(destination_dir, final_name))


if __name__ == "__main__":
    zooSync = ZooCollector()
    zooSync.get()
