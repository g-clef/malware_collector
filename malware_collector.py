import configparser
import datetime
import os
import git


class MalwareCollector:
    def __init__(self):
        self.configfile = configparser.ConfigParser()
        self.configfile.read("malware_collector.conf")
        self.archive_prefix = os.environ.get("ARCHIVE_PATH", "/RAID")
        self._cleanup = os.environ.get("CLEANUP", "false").lower() in ("true", "True", 1)
        self.path = None

    @staticmethod
    def pull_from_repo(git_path, git_url):
        """
        perform a git pull on the configured directory. If we had to clone the repo, return true, since changes
        definitely occurred.

        :return: boolean,  whether there were any updates during the git pull
        """
        if not os.path.exists(git_path):
            os.mkdir(git_path)
            git.Repo.clone_from(git_url, git_path)
            return True
        else:
            try:
                repo = git.Repo(git_path)
            except git.exc.InvalidGitRepositoryError:
                git.Repo.clone_from(git_url, git_path)
                return True
        current = repo.head.commit
        repo.remotes.origin.pull()
        return current != repo.head.commit

    def get(self):
        raise NotImplemented

    def cleanup(self):
        raise NotImplemented

    def make_day_directory(self):
        timestamp = datetime.datetime.now(datetime.timezone.utc)
        daydirname = os.path.join(self.path,
                                  str(timestamp.year),
                                  str(timestamp.month),
                                  str(timestamp.day))
        if not os.path.isdir(daydirname):
            os.makedirs(daydirname)
        return daydirname

    def run(self):
        assert self.path is not None
        if self._cleanup:
            self.cleanup()
        else:
            self.get()