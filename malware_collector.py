import configparser
import datetime
import os
import hashlib


class MalwareCollector:
    def __init__(self):
        self.configfile = configparser.ConfigParser()
        self.configfile.read("malware_collector.conf")
        self.archive_prefix = os.environ.get("ARCHIVE_PATH", "/RAID")
        self._cleanup = os.environ.get("CLEANUP", "false").lower() in ("true", "True", 1)
        self.path = None

    @staticmethod
    def make_hashes(filename):
        if os.path.isdir(filename):
            raise Exception("not a file")
        md5 = hashlib.md5()
        sha1 = hashlib.sha1()
        with open(filename, 'rb') as fileHandle:
            for chunk in iter(lambda: fileHandle.read(65536), b""):
                md5.update(chunk)
                sha1.update(chunk)
        return md5.hexdigest(), sha1.hexdigest()

    def get(self):
        raise NotImplemented

    def cleanup(self):
        raise NotImplemented

    def make_day_directory(self):
        timestamp = datetime.datetime.now(datetime.timezone.utc)
        daydirname = os.path.join(self.path,
                                  str(timestamp.year),
                                  str(timestamp.month),
                                  str(timestamp.day))
        if not os.path.isdir(daydirname):
            os.makedirs(daydirname)
        return daydirname

    def run(self):
        assert self.path is not None
        if self._cleanup:
            self.cleanup()
        else:
            self.get()