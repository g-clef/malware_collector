import git
import configparser
import zipfile
import os
import tempfile
import hashlib
from pathlib import Path
import shutil


def make_hashes(filename):
    if os.path.isdir(filename):
        raise Exception("not a file")
    md5 = hashlib.md5()
    sha1 = hashlib.sha1()
    with open(filename, 'rb') as fileHandle:
        for chunk in iter(lambda: fileHandle.read(65536), b""):
            md5.update(chunk)
            sha1.update(chunk)
    return md5.hexdigest(), sha1.hexdigest()


class ZooCollector:
    # plan: git checkout https://github.com/ytisf/theZoo/tree/master/malwares/Binaries to the base path
    # then walk through each folder and unzip the files that contain the actual malware.
    #

    def __init__(self, base_path):
        self.base_path = base_path

    def get(self) -> bool:
        # run the git pull to get the most recent data out of the repository
        # note: this assumes that the repo is already set up.
        # returns a boolean of whether anything changed. True = something new is in the repo.
        repo = git.Repo(self.base_path)
        current = repo.head.commit
        repo.remotes.origin.pull()
        return current != repo.head.commit

    @staticmethod
    def _try_password_extract(zipfile, filename, destination, password) -> bool:
        try:
            zipfile.extract(filename, destination, pwd=password)
            return True
        except RuntimeError:
            # could mean this wasn't compressed with a password
            try:
                zipfile.extract(filename, destination)
                return True
            except Exception:
                pass
        return False

    def _handle_zipfile(self, target_zip: zipfile.ZipFile, password: bytes, destination_dir: str):
        contained_files = target_zip.namelist()
        for target in contained_files:
            if target.endswith(".txt"):
                continue
            elif target.startswith("."):
                continue
            elif target.endswith(".zip"):
                # nested zip files, ugh
                with tempfile.TemporaryDirectory() as tempdir:
                    success = self._try_password_extract(target_zip, target, tempdir, password)
                    if not success:
                        continue
                    sub_compressed_file = zipfile.ZipFile(os.path.join(tempdir, target), mode="r")
                    self._handle_zipfile(sub_compressed_file, password, destination_dir)
            else:
                with tempfile.TemporaryDirectory() as tempdir:
                    success = self._try_password_extract(target_zip, target, tempdir, password)
                    if not success: continue
                    for file_name in os.listdir(tempdir):
                        full_path_to_target = os.path.join(tempdir, file_name)
                        try:
                            md5, sha1 = make_hashes(os.path.join(tempdir, file_name))
                        except Exception:
                            continue
                        final_name = md5 + "-" + sha1 + "-" + file_name
                        shutil.move(full_path_to_target, os.path.join(destination_dir, final_name))

    def analyze(self, malware_dir):
        # walk the base of the repo, find all the .zip files
        # unzip them using the password contained in the folder
        # delete the zip file once it's unzipped.
        full_path = os.path.join(self.base_path, "malwares", "Binaries")
        for target_dir in os.listdir(full_path):
            local_dir = os.path.join(full_path, target_dir)
            if os.path.exists(os.path.join(target_dir, "done.flag")):
                continue
            file_name = target_dir + ".pass"
            password_file = open(os.path.join(local_dir, file_name))
            password = password_file.read()
            password = password.encode('utf-8')
            malware_file = target_dir + ".zip"
            compressed_file = zipfile.ZipFile(os.path.join(local_dir, malware_file), mode="r")
            self._handle_zipfile(compressed_file, password, malware_dir)
            Path(os.path.join(local_dir, "done.flag")).touch()


class DasMalwerkCollector:
    # plan: hit https://dasmalwerk.eu daily, get the list of malware links, find any that we haven't already
    # downloaded, pull those.

    def __init__(self, base_path):
        self.base_path = base_path

    def get(self):
        pass

    def analyze(self, malware_dir):
        pass


class MalshareCollector:
    # plan: hit https://malshare.com API daily, get the list of malware links, find any that we haven't already
    # downloaded, pull those

    def __init__(self, base_path, api_key):
        self.base_path = base_path
        self.api_key = api_key

    def get(self):
        pass

    def analyze(self, malware_dir):
        pass


class VXVaultCollector:
    # plan: hit http://vxvault.net/ViriList.php daily. Find the ones we don't already have, pull those
    pass


class MacMalwareCollector:
    # plan: hit https://macmalware.manwe.io/feed.json, get the list of recent malware, pull all the ones we haven't seen
    # yet.
    pass


class ObjectiveSeeCollector:
    # plan: hit https://objective-see.com/malware.json, walk it to find ones we don't already have yet, pull those
    pass


class AndroidMalwareGithubCollector:
    # plan: git sync https://github.com/ashishb/android-malware

    def __init__(self, base_path):
        self.base_path = base_path

    def get(self):
        # run the git pull to get the most recent data out of the repository
        # note: this assumes that the repo is already set up.
        # returns a boolean of whether anything changed. True = something new is in the repo.
        repo = git.Repo(self.base_path)
        current = repo.head.commit
        repo.remotes.origin.pull()
        return current != repo.head.commit

    def analyze(self, malware_dir):
        pass

if __name__ == "__main__":
    configfile = configparser.ConfigParser()
    configfile.read("malware_collector.conf")
    zoo_path = configfile.get("theZoo", "git_path")
    android_malware_github_path = configfile.get("GithubAndroidMalware", "git_path")
    malware_path = configfile.get("Archive", "path")

    zooSync = ZooCollector(zoo_path)
    zooSync.get()

    androidSync = AndroidMalwareGithubCollector(android_malware_github_path)
    androidSync.get()

